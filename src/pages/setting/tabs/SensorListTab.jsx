import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { sensorApi } from '../../../services/api/sensor_api';
import { handleApiError } from '../../../utils/unifiedErrorHandler';
import { useAuth } from '../../../hooks/useAuth';

const SensorListTab = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [sensors, setSensors] = useState([]);
  const [filteredSensors, setFilteredSensors] = useState([]);
  const [filterType, setFilterType] = useState('all');
  const [filterZone, setFilterZone] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');

  // ÏÑºÏÑú Î™©Î°ù API Î°úÎìú
  useEffect(() => {
    let isMounted = true;
    const loadSensors = async () => {
      // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî (Ïù¥Ï†Ñ Îç∞Ïù¥ÌÑ∞ ÌÅ¥Î¶¨Ïñ¥)
      setSensors([]);
      setFilteredSensors([]);
      
      const params = {
        sensorType: filterType !== 'all' ? filterType : undefined,
        zoneId: filterZone !== 'all' ? filterZone : undefined,
        page: 0,
        size: 100 // Ï∂©Î∂ÑÌûà ÌÅ∞ ÌÅ¨Í∏∞Î°ú ÏÑ§Ï†ï
      };
      
      console.log('üöÄ ÏÑºÏÑú Î™©Î°ù Ï°∞Ìöå ÏãúÏûë');
      console.log('üìã ÏöîÏ≤≠ ÌååÎùºÎØ∏ÌÑ∞:', params);
      
      const result = await sensorApi.getSensors(params);
      if (!isMounted) return;
      
      console.log('‚úÖ ÏÑºÏÑú Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ:', result);
      
      if (result.success) {
        const payload = result.data;
        const list = payload?.data?.content || payload?.content || (Array.isArray(payload) ? payload : []);
        
        setSensors(list);
        setFilteredSensors(list);
      } else {
        const errorInfo = handleApiError(new Error(result.error), 'ÏÑºÏÑú Î™©Î°ù Ï°∞Ìöå');
        console.error('‚ùå ÏÑºÏÑú Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', errorInfo.message);
        setSensors([]);
        setFilteredSensors([]);
      }
    };
    loadSensors();
    return () => { isMounted = false; };
  }, [filterType, filterZone]);

  // Í≤ÄÏÉâÏñ¥ ÌïÑÌÑ∞ÎßÅ (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú)
  useEffect(() => {
    if (!searchTerm) {
      setFilteredSensors(sensors);
      return;
    }
    
    const filtered = sensors.filter(sensor => 
      sensor.sensorId.toLowerCase().includes(searchTerm.toLowerCase()) ||
      sensor.sensorType.toLowerCase().includes(searchTerm.toLowerCase()) ||
      sensor.zoneId.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    setFilteredSensors(filtered);
  }, [sensors, searchTerm]);

  // ÏÑºÏÑú ÌÉÄÏûÖÎ≥Ñ ÌïúÍ∏Ä Îß§Ìïë
  const sensorTypeMapping = {
    'electrostatic': 'Ï†ïÏ†ÑÍ∏∞',
    'Electrostatic': 'Ï†ïÏ†ÑÍ∏∞',
    'temperature': 'Ïò®ÎèÑ',
    'Temperature': 'Ïò®ÎèÑ',
    'humidity': 'ÏäµÎèÑ',
    'Humidity': 'ÏäµÎèÑ',
    'particle_0_1um': 'ÎØ∏ÏÑ∏Î®ºÏßÄ 0.1Œºm',
    'particle_0_3um': 'ÎØ∏ÏÑ∏Î®ºÏßÄ 0.3Œºm',
    'particle_0_5um': 'ÎØ∏ÏÑ∏Î®ºÏßÄ 0.5Œºm',
    'windDirection': 'ÌíçÌñ•',
    'WindDirection': 'ÌíçÌñ•'
  };

  // ÏÑºÏÑú ÌÉÄÏûÖ Î™©Î°ù
  const sensorTypes = ['all', 'electrostatic', 'temperature', 'humidity', 'particle_0_1um', 'particle_0_3um', 'particle_0_5um', 'windDirection'];
  
  // ÏÇ¨Ïö©Ïûê scopeÏóê Îî∞Î•∏ Íµ¨Ïó≠ Î™©Î°ù ÌïÑÌÑ∞ÎßÅ
  const getAllowedZones = () => {
    if (!user?.scope) return ['all', 'a', 'b', 'c']; // scopeÍ∞Ä ÏóÜÏúºÎ©¥ Ï†ÑÏ≤¥ Íµ¨Ïó≠
    
    const userScopes = user.scope.split(',').map(s => s.trim());
    const allowedZones = ['all']; // 'Ï†ÑÏ≤¥' ÏòµÏÖòÏùÄ Ìï≠ÏÉÅ Ìè¨Ìï®
    
    if (userScopes.includes('a')) allowedZones.push('a');
    if (userScopes.includes('b')) allowedZones.push('b');
    if (userScopes.includes('c')) allowedZones.push('c');
    
    return allowedZones;
  };
  
  const zones = getAllowedZones();

  // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ Ìï®Ïàò
  const formatDateTime = (isoString) => {
    const date = new Date(isoString);
    return date.toLocaleString('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  // ÏûÑÍ≥ÑÏπò Í∞í ÌëúÏãú Ìï®Ïàò
  const formatThresholdValue = (value) => {
    return value !== null ? value.toString() : '-';
  };

  return (
    <div>
      {/* ÌïÑÌÑ∞ Î∞è Í≤ÄÏÉâ ÏòÅÏó≠ */}
      <div className="bg-gray-50 p-6 rounded-lg mb-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {/* Í≤ÄÏÉâ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Í≤ÄÏÉâ
            </label>
            <input
              type="text"
              placeholder="ÏÑºÏÑúID, ÏÑºÏÑúÏ¢ÖÎ•ò, Íµ¨Ïó≠ Í≤ÄÏÉâ"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {/* ÏÑºÏÑú ÌÉÄÏûÖ ÌïÑÌÑ∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ÏÑºÏÑú Ï¢ÖÎ•ò
            </label>
            <select
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {sensorTypes.map(type => (
                <option key={type} value={type}>
                  {type === 'all' ? 'Ï†ÑÏ≤¥' : sensorTypeMapping[type] || type}
                </option>
              ))}
            </select>
          </div>

          {/* Íµ¨Ïó≠ ÌïÑÌÑ∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Íµ¨Ïó≠
            </label>
            <select
              value={filterZone}
              onChange={(e) => setFilterZone(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {zones.map(zone => (
                <option key={zone} value={zone}>
                  {zone === 'all' ? 'Ï†ÑÏ≤¥' : `${zone.toUpperCase()}Íµ¨Ïó≠`}
                </option>
              ))}
            </select>
          </div>

          {/* Í≤∞Í≥º Ïàò */}
          <div className="flex items-end">
            <div className="text-sm text-gray-600">
              Ï¥ù {filteredSensors.length}Í∞úÏùò ÏÑºÏÑú
            </div>
          </div>
        </div>
      </div>

      {/* ÏÑºÏÑú Î™©Î°ù ÌÖåÏù¥Î∏î */}
      <div className="bg-white rounded-lg border overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ÏÑºÏÑúID
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Íµ¨Ïó≠ID
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ÏÑºÏÑúÏú†Ìòï
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Í≤ΩÍ≥†L
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Í≤ΩÍ≥†H
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Ï¥àÍ≥ºL
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Ï¥àÍ≥ºH
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ÏàòÏ†ïÏãúÍ∞Ñ
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ÏàòÏ†ïÏûê
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredSensors.map((sensor, index) => (
                <tr key={`${sensor.sensorId}-${sensor.zoneId}-${index}`} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {sensor.sensorId}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {sensor.zoneId.toUpperCase()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {sensorTypeMapping[sensor.sensorType] || sensor.sensorType}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-500">
                    {formatThresholdValue(sensor.warningLow)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-500">
                    {formatThresholdValue(sensor.warningHigh)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-500">
                    {formatThresholdValue(sensor.alertLow)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-500">
                    {formatThresholdValue(sensor.alertHigh)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {formatDateTime(sensor.updatedAt)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {sensor.updatedUserId}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Îπà Í≤∞Í≥º Î©îÏãúÏßÄ */}
        {filteredSensors.length === 0 && (
          <div className="text-center py-12">
            <div className="text-gray-500 text-lg">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</div>
            <div className="text-gray-400 text-sm mt-2">Îã§Î•∏ Í≤ÄÏÉâ Ï°∞Í±¥ÏùÑ ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.</div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SensorListTab;
