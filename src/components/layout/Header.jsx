import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  FiSettings, 
  FiBell, 
  FiSun, 
  FiMoon, 
  FiCloud, 
  FiCloudRain, 
  FiCloudSnow, 
  FiZap, 
  FiEye,
  FiToggleLeft,
  FiToggleRight
} from 'react-icons/fi';
import Icon from '../common/Icon';
import Text from '../common/Text';
import { notificationApi } from '../../services/api/notification_api';
import { weatherApi } from '../../services/api/weather_api';
import { useAuth } from '../../hooks/useAuth';
import { useTheme } from '../../contexts/ThemeContext';

const Header = () => {
  const navigate = useNavigate();
  const { theme, toggleTheme } = useTheme();
  const [weatherData, setWeatherData] = useState(null);
  const [alarmCount, setAlarmCount] = useState(0); // Í∏∞Î≥∏Í∞íÏùÑ 0ÏúºÎ°ú ÏÑ§Ï†ï
  const [currentTime, setCurrentTime] = useState(new Date()); // Ïã§ÏãúÍ∞Ñ ÏãúÍ∞Ñ ÏÉÅÌÉú
  
  // Ïù∏Ï¶ù ÏÉÅÌÉú Î∞è ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const { 
    user: currentUser, 
    logout, 
    isAuthenticated, 
    isLoading,
    updateUser,
    isAdmin,
    isUser 
  } = useAuth({ redirectOnFail: false });

  // alarmCount ÏÉÅÌÉú Î≥ÄÌôî Í∞êÏßÄ (Î∞∞Ìè¨ Ïãú Ï£ºÏÑù Ï≤òÎ¶¨)
  // useEffect(() => {
  //   console.log('alarmCount ÏÉÅÌÉú Î≥ÄÍ≤ΩÎê®:', alarmCount);
  // }, [alarmCount]);

  // ÏïåÎ¶º Ïπ¥Ïö¥ÌÑ∞ Î≥ÄÌôî Í∞êÏßÄ (localStorage Î≥ÄÌôî)
  useEffect(() => {
    const handleStorageChange = (e) => {
      // ÏïåÎ¶º Ïπ¥Ïö¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ Í∞êÏßÄ
      if (e.key === 'unread_alarm_count') {
        const newCount = parseInt(e.newValue || '0', 10);
        setAlarmCount(newCount);
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  // ÎÇ†Ïî® Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const getWeatherInfo = async () => {
      const result = await weatherApi.getCurrentWeather();
      
      if (result.success) {
        setWeatherData(result.data.data);
      }
    };

    getWeatherInfo();
    // 5Î∂ÑÎßàÎã§ ÎÇ†Ïî® Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
    const interval = setInterval(getWeatherInfo, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  // ÏïåÎ¶º Í∞úÏàò Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchAlarmCount = async () => {
      try {
        const response = await notificationApi.getUnreadNotificationCount();
        
        if (response?.data !== undefined) {
          // APIÏóêÏÑú ÏßÅÏ†ë ÏïàÏùΩÏùå Í∞úÏàò Î∞òÌôò (response.dataÏóê Ïà´Ïûê Í∞í)
          setAlarmCount(response.data);
          // localStorageÏóêÎèÑ Ï†ÄÏû•
          localStorage.setItem('unread_alarm_count', response.data.toString());
        } else {
          // API ÏùëÎãµÏù¥ ÏóÜÏùÑ Í≤ΩÏö∞ 0ÏúºÎ°ú ÏÑ§Ï†ï
          setAlarmCount(0);
          localStorage.setItem('unread_alarm_count', '0');
        }
      } catch (error) {
        // API Ïã§Ìå® Ïãú 0ÏúºÎ°ú ÏÑ§Ï†ï
        setAlarmCount(0);
        localStorage.setItem('unread_alarm_count', '0');
      }
    };

    // Ï¥àÍ∏∞ Î°úÎìú Ïãú localStorageÏóêÏÑú ÏïåÎ¶º Ïπ¥Ïö¥ÌÑ∞ ÌôïÏù∏
    const storedCount = localStorage.getItem('unread_alarm_count');
    if (storedCount) {
      const count = parseInt(storedCount, 10);
      setAlarmCount(count);
    }
    
    // Ìï≠ÏÉÅ ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î•º ÏúÑÌï¥ API Ìò∏Ï∂ú (localStorage Í∞íÏù¥ ÏûàÏñ¥ÎèÑ)
    fetchAlarmCount();
    
    // 30Ï¥àÎßàÎã§ ÏïåÎ¶º Í∞úÏàò ÏóÖÎç∞Ïù¥Ìä∏
    const interval = setInterval(fetchAlarmCount, 30 * 1000);
    return () => clearInterval(interval);
  }, []);

  // Ïã§ÏãúÍ∞Ñ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000); // 1Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
    
    return () => clearInterval(timer); // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
  }, []);

  // ÌòÑÏû¨ ÏãúÍ∞Ñ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const getCurrentTimeInfo = () => {
    const dateString = currentTime.toLocaleDateString();
    const weekdayString = `(${currentTime.toLocaleDateString('ko-KR', { weekday: 'short' })})`;
    const timeString = currentTime.toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    
    return { dateString, weekdayString, timeString };
  };

  // Ïä§ÌÉÄÏùº Í∞ùÏ≤¥Îì§ - Î∏åÎûúÎìú ÏÉâÏÉÅ Ï†ÅÏö©ÌïòÎ©¥ÏÑú Ïã¨ÌîåÌïú ÎîîÏûêÏù∏
  const styles = {
    header: {
      background: 'linear-gradient(135deg, rgba(240, 240, 249, 0.95) 0%, rgba(229, 229, 242, 0.95) 100%)',
      backdropFilter: 'blur(10px)',
      borderBottom: '1px solid rgba(229, 229, 242, 0.6)',
      boxShadow: '0 1px 2px rgba(73, 79, 162, 0.1)'
    },
    logo: {
      height: '100%'
    },
    timeInfo: {},
    userNav: {},
    logoIcon: {
      fontSize: '24px',
      lineHeight: '24px'
    },
    notificationDot: {
      marginLeft: '25px'
    },
    userName: {
      marginLeft: '25px'
    },
    weatherInfo: {
      marginLeft: '25px'
    },
  };

  const { dateString, weekdayString, timeString } = getCurrentTimeInfo();

  // Î°úÍ≥† Ïª¥Ìè¨ÎÑåÌä∏
  const Logo = () => (
    <div className="flex items-center" style={styles.logo}>
      <img 
        src="/logo2.png" 
        alt="DeeFacto Logo" 
        className="w-[47px] h-[40px]"
        onError={(e) => {
          e.target.style.display = 'none';
          e.target.nextSibling.style.display = 'flex';
        }}
      />
      <span 
        className="flex items-center justify-center w-[50px] h-[50px] text-4xl hidden"
        style={{ ...styles.logoIcon, display: 'none' }}
      >
        üßä
      </span>
      {/* <Text
        variant="title"
        size="xl"
        weight="extrabold"
        color="blue-600"
        className="ml-3"
      >
        Deefacto
      </Text> */}
    </div>
  );

  // ÎÇ†Ïî® ÏÑ§Î™ÖÏùÑ ÌïúÍµ≠Ïñ¥Î°ú Î≤àÏó≠ÌïòÎäî Ìï®Ïàò
  const translateWeatherDescription = (description) => {
    const weatherMap = {
      'clear sky': 'ÎßëÏùå',
      'few clouds': 'Íµ¨Î¶Ñ Ï°∞Í∏à',
      'scattered clouds': 'Íµ¨Î¶Ñ ÎßéÏùå',
      'broken clouds': 'Íµ¨Î¶Ñ ÎßéÏùå',
      'shower rain': 'ÏÜåÎÇòÍ∏∞',
      'rain': 'ÎπÑ',
      'thunderstorm': 'Ï≤úÎë•Î≤àÍ∞ú',
      'snow': 'Îàà',
      'mist': 'ÏïàÍ∞ú',
      'overcast clouds': 'ÌùêÎ¶º'
    };
    
    return weatherMap[description] || description;
  };

  // ÎÇ†Ïî® Ï†ïÎ≥¥ ÏÉàÎ°úÍ≥†Ïπ® Ìï®Ïàò
  const refreshWeatherInfo = async () => {
    const result = await weatherApi.refreshWeather();
    if (result.success) {
      setWeatherData(result.data.data);
    }
  };


  // ÏÇ¨Ïö©Ïûê ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïª¥Ìè¨ÎÑåÌä∏ - Í∞ÑÍ≤© Ï°∞Ï†ïÎêú ÍπîÎÅîÌïú ÎîîÏûêÏù∏
  const UserNavigation = () => (
    <nav className="flex items-center h-full gap-4" style={styles.userNav}>
      {/* ÎÇ†Ïî® Ï†ïÎ≥¥ */}
      <div 
        className="cursor-pointer hover:opacity-80 transition-opacity duration-200 flex items-center gap-2"
        onClick={refreshWeatherInfo}
        title="ÎÇ†Ïî® Ï†ïÎ≥¥ ÏÉàÎ°úÍ≥†Ïπ®"
      >
        <Icon className="text-secondary-500 dark:text-neutral-300 hover:text-brand-main transition-colors">
          {weatherData ? (
            weatherData.icon === '01d' ? <FiSun /> : 
            weatherData.icon === '01n' ? <FiMoon /> :
            weatherData.icon === '02d' ? <FiCloud /> : 
            weatherData.icon === '02n' ? <FiCloud /> :
            weatherData.icon === '03d' ? <FiCloud /> : 
            weatherData.icon === '03n' ? <FiCloud /> :
            weatherData.icon === '04d' ? <FiCloud /> : 
            weatherData.icon === '04n' ? <FiCloud /> :
            weatherData.icon === '09d' ? <FiCloudRain /> : 
            weatherData.icon === '09n' ? <FiCloudRain /> :
            weatherData.icon === '10d' ? <FiCloudRain /> : 
            weatherData.icon === '10n' ? <FiCloudRain /> :
            weatherData.icon === '11d' ? <FiZap /> : 
            weatherData.icon === '11n' ? <FiZap /> :
            weatherData.icon === '13d' ? <FiCloudSnow /> : 
            weatherData.icon === '13n' ? <FiCloudSnow /> :
            weatherData.icon === '50d' ? <FiEye /> : 
            weatherData.icon === '50n' ? <FiEye /> : <FiSun />
          ) : <FiSun />}
        </Icon>
        <Text variant="body" size="sm" weight="normal" color="secondary-500">
          {weatherData ? (
            <>
              {weatherData.description ? translateWeatherDescription(weatherData.description) : (weatherData.main || 'ÎÇ†Ïî®')}
              {weatherData.temp && ` ${Math.round(weatherData.temp)}¬∞C`}
            </>
          ) : (
            <span className="text-secondary-500">Î°úÎî©Ï§ë...</span>
          )}
        </Text>
      </div>
      
      {/* Íµ¨Î∂ÑÏÑ† */}
      <div className="h-4 w-px bg-brand-medium/50 dark:bg-neutral-600/50"></div>
      
      {/* ÏãúÍ∞Ñ Ï†ïÎ≥¥ */}
      <div>
        <Text variant="body" size="sm" weight="normal" color="secondary-500">
          {dateString} {weekdayString} {timeString}
        </Text>
      </div>
      
      {/* Íµ¨Î∂ÑÏÑ† */}
      <div className="h-4 w-px bg-brand-medium/50 dark:bg-neutral-600/50"></div>
      
      {/* ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ */}
      <div>
        <Text 
          variant="body" 
          size="base"
          weight="bold"
          color="secondary-500 dark:text-neutral-400"
          className="whitespace-nowrap tracking-wide"
        >
          {isAuthenticated && currentUser?.name 
            ? `${currentUser.name} ${currentUser.position || 'ÏÇ¨Ïõê'}` 
            : 'ÏÇ¨Ïö©Ïûê'
          }
        </Text>
      </div>
      
      {/* Íµ¨Î∂ÑÏÑ† */}
      <div className="h-4 w-px bg-brand-medium/50 dark:bg-neutral-600/50"></div>
      
      {/* Îã§ÌÅ¨Î™®Îìú ÌÜ†Í∏Ä Î≤ÑÌäº */}
      <button
        onClick={toggleTheme}
        className="p-1.5 hover:bg-brand-light/50 dark:hover:bg-neutral-700/50 rounded-lg transition-all duration-200"
        title={theme === 'dark' ? 'ÎùºÏù¥Ìä∏ Î™®ÎìúÎ°ú Î≥ÄÍ≤Ω' : 'Îã§ÌÅ¨ Î™®ÎìúÎ°ú Î≥ÄÍ≤Ω'}
      >
        <Icon className="text-secondary-500 dark:text-neutral-300 hover:text-brand-main transition-colors">
          {/* {theme === 'dark' ? <FiSun size={20} /> : <FiMoon size={20} />} */}
          {theme === 'dark' ? <FiToggleRight /> : <FiToggleLeft />}
        </Icon>
      </button>
      
      {/* ÏïåÎ¶º Î≤ÑÌäº */}
      <button
        onClick={() => navigate("/home/alarm")}
        className="relative p-1.5 hover:bg-brand-light/50 dark:hover:bg-neutral-700/50 rounded-lg transition-all duration-200"
        title="ÏïåÎ¶º"
      >
        <Icon className="text-secondary-500 dark:text-neutral-300 hover:text-brand-main transition-colors">
          <FiBell />
        </Icon>
        
        {/* ÏïåÎ¶º Í∞úÏàò Î±ÉÏßÄ - ÏïåÎ¶ºÏù¥ ÏûàÏùÑ ÎïåÎßå ÌëúÏãú */}
        {alarmCount > 0 && (
          <span className="absolute -top-1 -right-1 min-w-[18px] h-[18px] bg-danger-500 text-white text-xs font-bold rounded-full flex items-center justify-center px-1">
            {alarmCount > 99 ? '99+' : alarmCount}
          </span>
        )}
      </button>
      
      {/* ÏÑ§Ï†ï Î≤ÑÌäº */}
      <button
        onClick={() => navigate("/home/setting")}
        className="p-1.5 hover:bg-brand-light/50 dark:hover:bg-neutral-700/50 rounded-lg transition-all duration-200"
        title="ÏÑ§Ï†ï"
      >
        <Icon className="text-secondary-500 dark:text-neutral-300 hover:text-brand-main transition-colors">
          <FiSettings />
        </Icon>
      </button>
    </nav>
  );



  // Î°úÎî© Ï§ëÏù¥Î©¥ Ïä§ÌîºÎÑà ÌëúÏãú
  if (isLoading) {
    return (
      <header className="flex w-full h-[60px] justify-between items-center flex-shrink-0 relative z-50 px-6 bg-gradient-to-r from-brand-light/95 to-brand-medium/95 dark:from-neutral-800/95 dark:to-neutral-700/95 backdrop-blur-md border-b border-white/20 dark:border-neutral-700/30 shadow-soft transition-colors duration-300">
        <Logo />
        <div className="flex-1"></div>
        <div className="flex items-center gap-2">
          <div className="w-4 h-4 border-2 border-brand-main border-t-transparent rounded-full animate-spin"></div>
          <span className="text-sm text-secondary-500">Î°úÎî©Ï§ë...</span>
        </div>
      </header>
    );
  }

  return (
    <header 
      className="flex w-full h-[60px] justify-between items-center flex-shrink-0 relative z-50 px-6 bg-gradient-to-r from-brand-light/95 to-brand-medium/95 dark:from-neutral-800/95 dark:to-neutral-700/95 backdrop-blur-md border-b border-white/20 dark:border-neutral-700/30 shadow-soft transition-colors duration-300" 
    >
      <Logo />
      
      {/* Ï§ëÏïô Í≥µÍ∞Ñ */}
      <div className="flex-1"></div>
      
      <UserNavigation />
    </header>
  );
};

export default Header; 